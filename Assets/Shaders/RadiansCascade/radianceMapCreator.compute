#pragma kernel RadianceMapRayTracer

#define TWO_PI 6.28318530718

Texture2D<float4> emitterScene;
RWTexture3D<half4> radianceMap;

SamplerState emitterLinearClampSampler;

float2 radianceScale;
float rayOffset;
float stepSize;
uint quarterSampleCount;

float4 rayTrace(float2 uv, float2 step);
void rayTraceStep(inout float4 radiance, inout float2 uv, in float2 step);

[numthreads(4,4,4)]
void RadianceMapRayTracer(uint3 pos : SV_DispatchThreadID) {

    float3 radianceMapSize;
    radianceMap.GetDimensions(radianceMapSize.x, radianceMapSize.y, radianceMapSize.z);

    float2 emitterSceneSize;
    emitterScene.GetDimensions(emitterSceneSize.x, emitterSceneSize.y);

    float angle = ((float)pos.z / radianceMapSize.z) * TWO_PI;

    float2 uvDir = float2(cos(angle), sin(angle)) / emitterSceneSize;
    float2 uvCenter = ((float2(pos.xy) + 0.5) * radianceScale) / emitterSceneSize;
    float2 uvOrigin = uvCenter + uvDir * rayOffset;

    radianceMap[pos.xyz] = rayTrace(uvOrigin, uvDir * stepSize);
}

float4 rayTrace(float2 uv, float2 step) {

    float4 radiance = float4(0, 0, 0, 1);

    for (uint i = 0; i != quarterSampleCount; ++i) {
        rayTraceStep(radiance, uv, step);
        rayTraceStep(radiance, uv, step);
        rayTraceStep(radiance, uv, step);
        rayTraceStep(radiance, uv, step);
    }

    return radiance;
}

void rayTraceStep(inout float4 radiance, inout float2 uv, in float2 step) {
    float4 pointRadiance = emitterScene.SampleLevel(emitterLinearClampSampler, uv, 0);

    radiance.xyz += radiance.w * pointRadiance.xyz;
    radiance.w *= 1.0 - pointRadiance.w;

    uv += step;
}
