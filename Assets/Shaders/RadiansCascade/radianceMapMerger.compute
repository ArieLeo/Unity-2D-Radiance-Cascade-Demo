#pragma kernel RadianceMapMergeKernel

RWTexture3D<half4> farRadianceMap;
RWTexture3D<half4> nearRadianceMap;

struct AngleIndices {
    uint outerLeft;
    uint innerLeft;
    uint center;
    uint innerRight;
    uint outerRight;
};

AngleIndices calcAngleIndices(uint farAngleIndex, uint farAngularRes);
float4 sampleAngles(uint2 farCellPos, in AngleIndices indices);

[numthreads(4,4,4)]
void RadianceMapMergeKernel(uint3 nearPos : SV_DispatchThreadID) {

    uint2 farPosLL = (int2(nearPos.xy) - 1) / 2; // -1 / 2 = 0
    uint2 farPosRL = farPosLL + uint2(1, 0);
    uint2 farPosLU = farPosLL + uint2(0, 1);
    uint2 farPosRU = farPosLL + uint2(1, 1);

    uint3 farSize;
    farRadianceMap.GetDimensions(farSize.x, farSize.y, farSize.z);

    AngleIndices farAngles = calcAngleIndices(4 * nearPos.z, farSize.z);

    float4 farRadianceLU = sampleAngles(farPosLU, farAngles), farRadianceRU = sampleAngles(farPosRU, farAngles);
    float4 farRadianceLL = sampleAngles(farPosLL, farAngles), farRadianceRL = sampleAngles(farPosRL, farAngles);

    float2 farCellUV = 0.5 * float2(nearPos.xy) - float2(farPosLL) - 0.25;
    float4 farCellU = farCellUV.x;
    float4 farCellV = farCellUV.y;

    float4 farRadiance = lerp(
        lerp(farRadianceLL, farRadianceRL, farCellU),
        lerp(farRadianceLU, farRadianceRU, farCellU),
        farCellV
    );

    float4 nearRadiance = nearRadianceMap[nearPos.xyz];

    nearRadiance.xyz += nearRadiance.w * farRadiance.xyz;
    nearRadiance.w *= farRadiance.w;

    nearRadianceMap[nearPos.xyz] = nearRadiance;
}

AngleIndices calcAngleIndices(uint farAngleIndex, uint farAngularRes) {
    AngleIndices farIndices;
    farIndices.outerLeft = (farAngleIndex + (farAngularRes - 2)) % farAngularRes;
    farIndices.innerLeft = (farAngleIndex + (farAngularRes - 1)) % farAngularRes;
    farIndices.center = farAngleIndex;
    farIndices.innerRight = (farAngleIndex + 1) % farAngularRes;
    farIndices.outerRight = (farAngleIndex + 2) % farAngularRes;
    return farIndices;
}

float4 sampleAngles(uint2 farPos, in AngleIndices indices) {
    return 0.25 * (
        float4(farRadianceMap[uint3(farPos, indices.outerLeft)] * 0.5) +
        float4(farRadianceMap[uint3(farPos, indices.innerLeft)]) +
        float4(farRadianceMap[uint3(farPos, indices.center)]) +
        float4(farRadianceMap[uint3(farPos, indices.innerRight)]) +
        float4(farRadianceMap[uint3(farPos, indices.outerRight)] * 0.5)
    );
}
